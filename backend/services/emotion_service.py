import os
from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline

class EmotionService:
    def __init__(self):
        self.classifier = self._load_model()
    
    def _load_model(self):
        model_path = os.path.join(
            os.path.dirname(__file__), "models", "big_Emotions_model"
        )
        try:
            print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å —ç–º–æ—Ü–∏–π –∏–∑: {model_path}")
            tokenizer = AutoTokenizer.from_pretrained(model_path)
            model = AutoModelForSequenceClassification.from_pretrained(model_path)
            return pipeline("text-classification", model=model, tokenizer=tokenizer)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —ç–º–æ—Ü–∏–π: {e}")
            return None
    
    def detect_emotion(self, text: str) -> str:
        if not text:
            return "neutral"
        
        text_lower = text.lower()

        if self.classifier:
            try:
                result = self.classifier(text)[0]
                raw_label = result["label"].lower()

                label_map = {
                    "surprise": "surprised",    
                    "laugh": "laughing",        
                    "curiosity": "curious",     
                    "angry": "angry",
                    "happy": "happy",
                    "sad": "sad", 
                    "love": "love",
                    "neutral": "neutral"
                }
                emotion = label_map.get(raw_label, raw_label)
                return emotion
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —ç–º–æ—Ü–∏–∏: {e}")

        # –†–µ–∑–µ—Ä–≤–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        emotion_keywords = {
            "sad": ["–±–æ–ª–µ–∑–Ω—å", "—É–º–µ—Ä", "–ø–æ—Ç–µ—Ä—è–ª", "–≥—Ä—É—Å—Ç", "–ø–ª–æ—Ö–æ", "–∑–∞–±–æ–ª", "–±–æ–ª—å–Ω", "–æ–ø–µ—Ä–∞—Ü"],
            "angry": ["–∑–ª", "–±–µ—Å–∏—Ç", "–Ω–µ–Ω–∞–≤–∏–∂—É", "—Ä–∞–∑–æ–∑", "—è—Ä–æ—Å—Ç", "–∑–ª—é—Å—å", "—Å–µ—Ä–¥–∏—Ç", "—Ä–∞–∑–¥—Ä–∞–∂"],
            "happy": ["—Ä–∞–¥", "—Å—á–∞—Å—Ç", "–≤–µ—Å–µ–ª", "—É—Ä–∞", "–∫–ª–∞—Å—Å", "–∫—Ä—É—Ç–æ", "—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á"],
            "love": ["–ª—é–±–ª", "–æ–±–æ–∂–∞—é", "–¥–æ—Ä–æ–≥", "–º–∏–ª", "—Å–µ—Ä–¥–µ—á–∫", "–Ω–µ–∂–Ω"],
            "curious": ["–∏–Ω—Ç–µ—Ä–µ—Å", "—É–¥–∏–≤–∏—Ç", "–ª—é–±–æ–ø—ã—Ç", "—Ö–æ—á—É –∑–Ω–∞—Ç—å", "–ø–æ—á–µ–º—É", "–∫–∞–∫"],
            "surprised": ["–≤–∞—É", "–æ–≥–æ", "–Ω–µ–≤–µ—Ä–æ—è—Ç", "—É–¥–∏–≤–∏—Ç–µ–ª—å", "—Å—é—Ä–ø—Ä–∏–∑", "–Ω–µ –æ–∂–∏–¥–∞–ª", "–≤–æ—Ç —ç—Ç–æ –¥–∞", "–Ω–∏—á–µ–≥–æ —Å–µ–±–µ"],
            "laughing": ["—Å–º–µ—é—Å—å", "—Å–º–µ—à–Ω–æ", "–∞—Ö–∞—Ö", "–ª–æ–ª", "—Ä–∂—É"]
        }
        
        for emotion, keywords in emotion_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                return emotion
                
        return "neutral"

emotion_service = EmotionService()