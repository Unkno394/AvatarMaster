import sys
import os
from dotenv import load_dotenv
from datetime import timedelta
from flask import Flask, request, jsonify, session
from flask_cors import CORS
import logging
import time

env_path = os.path.join(os.path.dirname(__file__), '.env')
print(f"–ó–∞–≥—Ä—É–∑–∫–∞ .env –∏–∑: {env_path}")
print(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(env_path)}")

if os.path.exists(env_path):
    load_dotenv(env_path)
    print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
else:
    print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    with open(env_path, 'w') as f:
        f.write("SECRET_KEY=temp-secret-key-for-development-only\n")
        f.write("MODEL_PATH=../saiga_llama3_8b.Q4_K_M.gguf\n")
    load_dotenv(env_path)
    print("‚úÖ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª")


print("MODEL_PATH:", os.getenv("MODEL_PATH"))
print("SECRET_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", bool(os.getenv("SECRET_KEY")))

try:
    from services.llm_service import llm_service
    from services.emotion_service import emotion_service
    from utils.text_cleaner import clean_text
    print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    sys.exit(1)

logging.basicConfig(
    level=logging.DEBUG,
    filename="app.log",
    format='%(asctime)s - %(levelname)s - %(message)s'
)

app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY", "fallback-dev-key-for-debug-only")
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=30)
CORS(app)


MAX_HISTORY_LENGTH = 6  

def get_user_history():
    if "history" not in session:
        session["history"] = []
    return session["history"]

def format_history(history):
    if not history:
        return ""
    
    formatted_lines = []
    for msg in history:
        role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "–ü—Å–∏—Ö–æ–ª–æ–≥"
        formatted_lines.append(f"{role}: {msg['content']}")
    
    return "\n".join(formatted_lines)

def update_history(user_message, bot_response):
    history = get_user_history()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    history.append({"role": "user", "content": user_message})
    history.append({"role": "bot", "content": bot_response})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
    if len(history) > MAX_HISTORY_LENGTH:
        history = history[-MAX_HISTORY_LENGTH:]
    
    session["history"] = history
    return history

def generate_psychologist_response(question, history, emotion):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        emotion_context = {
            "sad": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –≥—Ä—É—Å—Ç—å –∏ –ø–µ—á–∞–ª—å. –ü–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ, –ø—Ä–æ—è–≤–∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ, –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–µ—à–µ–Ω–∏–µ.",
            "happy": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∞—Å—Ç–ª–∏–≤. –†–∞–∑–¥–µ–ª–∏ –µ–≥–æ —Ä–∞–¥–æ—Å—Ç—å, –ø–æ–∑–¥—Ä–∞–≤–∏, –ø—Ä–æ—è–≤–∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å.",
            "angry": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–ª–∏—Ç—Å—è. –ü–æ–º–æ–≥–∏ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è, –ø—Ä–æ—è–≤–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
            "love": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–≤—å. –ü–æ–¥–¥–µ—Ä–∂–∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ, –ø—Ä–æ—è–≤–∏ —Ç–µ–ø–ª–æ—Ç—É.",
            "neutral": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.",
            "curious": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—è–≤–ª—è–µ—Ç –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ. –û—Ç–≤–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.",
            "surprised": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∏–≤–ª–µ–Ω. –†–∞–∑–¥–µ–ª–∏ –µ–≥–æ —É–¥–∏–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—è–≤–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–∏—á–∏–Ω–µ, –ø–æ–¥–¥–µ—Ä–∂–∏ —ç–º–æ—Ü–∏—é."
        }
        
        emotion_guidance = emotion_context.get(emotion, "–û—Ç–≤–µ—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.")
        
        formatted_history = format_history(history)
        
        prompt = (
            "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–º–æ–≥–∞—Ç—å –µ–º—É.\n"
            f"{emotion_guidance}\n\n"
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.\n"
            "–ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑, –±—É–¥—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º.\n\n"
        )
        
        if formatted_history:
            prompt += f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{formatted_history}\n\n"
        
        prompt += (
            f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}\n\n"
            "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç, –±–µ–∑ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏):"
        )

        print(f"üîç –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏:\n{prompt}\n")
        
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                answer = llm_service.generate_response(
                    prompt, 
                    max_tokens=150, 
                    temperature=0.7
                )
                
                if answer and len(answer.strip()) > 10 and not answer.startswith("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å"):
                    return answer.strip()
                
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: '{answer}'")
                time.sleep(0.5) 
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt == max_attempts - 1:
                    raise
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç
        fallback_responses = {
            "sad": "–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ —Ç–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
            "happy": "–≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –†–∞–¥ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å –≤–∞–º–∏ —ç—Ç—É —Ä–∞–¥–æ—Å—Ç—å!",
            "angry": "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –≤–æ–∑–º—É—â–µ–Ω–∏–µ. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø–æ–¥—É–º–∞–µ–º, –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é.",
            "surprised": "–í–∞—É, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å —Ç–∞–∫ —É–¥–∏–≤–∏–ª–æ?",
            "default": "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?"
        }
        
        return fallback_responses.get(emotion, fallback_responses["default"])
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ generate_psychologist_response: {e}")
        return "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?"

@app.errorhandler(400)
def bad_request(error):
    return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å", "details": str(error)}), 400

@app.errorhandler(500)
def server_error(error):
    logging.error(f"Server error: {str(error)}")
    return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route("/health", methods=["GET"])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        "status": "healthy",
        "services": {
            "llm": "available",
            "emotion": "available"
        }
    })

@app.route("/ask", methods=["POST"])
def ask():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º"""
    try:
        if not request.is_json:
            return jsonify({"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è JSON-–∑–∞–ø—Ä–æ—Å"}), 400
        
        data = request.get_json(force=True)
        input_value = data.get("question", "").strip()
        
        if not input_value:
            return jsonify({"error": "–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        question = clean_text(input_value)
        if not question:
            return jsonify({"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥"}), 400

        print(f"üì© –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
        
        emotion = emotion_service.detect_emotion(question)
        print(f"üé≠ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —ç–º–æ—Ü–∏—è: {emotion}")
        
        history = get_user_history()
        print(f"üìö –†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
        
        start_time = time.time()
        answer = generate_psychologist_response(question, history, emotion)
        response_time = time.time() - start_time
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: '{answer}'")
        print(f"‚è± –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response_time:.2f} —Å–µ–∫")
        
        update_history(question, answer)

        return jsonify({
            "answer": answer,
            "emotion": emotion,
            "response_time": round(response_time, 2),
            "history_length": len(get_user_history())
        })

    except Exception as e:
        logging.error(f"Error in /ask: {str(e)}", exc_info=True)
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /ask: {e}")
        return jsonify({
            "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        }), 500

@app.route("/clear", methods=["POST"])
def clear_history():
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        session["history"] = []
        return jsonify({
            "status": "success", 
            "message": "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞"
        })
    except Exception as e:
        logging.error(f"Error in /clear: {str(e)}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏"}), 500

@app.route("/history", methods=["GET"])
def get_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        history = get_user_history()
        return jsonify({
            "history": history,
            "length": len(history)
        })
    except Exception as e:
        logging.error(f"Error in /history: {str(e)}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"}), 500

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if app.secret_key else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    app.run(
        debug=True,
        host='0.0.0.0',
        port=5000
    )